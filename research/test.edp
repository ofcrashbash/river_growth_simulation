///////////////////////
// Construc the mesh //
///////////////////////
int zero = 1;
border C01(t = 0, 1){x = t*0.25;        y = 0;           label = zero;}
border C02(t = 0, 1){x = 0.25 + t*0.75; y = 0;           label = zero;}
border C03(t = 0, 1){x = 1;             y = 0 + t;       label = zero;}
border C04(t = 0, 1){x = 1 - t;         y = 1;           label = zero;}
border C05(t = 0, 1){x = 0;             y = 1 - t;       label = zero;}
border C06(t = 0, 1){x = 0.25;          y = 0.1 - t*0.1; label = zero;}

int n = 10;
//Plotting boundaries
plot(C01(n) + C02(n) + C03(n) + C04(n) + C05(n) + C06(n), wait = true);

//Building initial mesh
mesh Th = buildmesh(C01(n) + C02(n) + C03(n) + C04(n) + C05(n) + C06(n));
plot(Th, fill = 1, wait = true);




/////////////////////////
// Problem declaration //
/////////////////////////
fespace Vh(Th, P2);
fespace Vh0(Th, P0);
Vh u, v;
//In original simulation it is 0.25;
//but in my test 1.
real rainrate = 1.; 
problem Poisson(u, v, solver = sparsesolver) =
         int2d(Th)(dx(u)*dx(v) + dy(u)*dy(v))
             - int2d(Th)(rainrate * v) 
             + on(zero, u = 0)
             + on(zero, u = 0)
             + on(zero, u = 0);// impervious apalachicola




///////////////////
// Mesh adaption //
///////////////////
func real tipfield( real xtip, real ytip, real sigma)
{	
	real rsq = sqrt((x - xtip)^2 + (y - ytip)^2);
 	return exp(- rsq/sigma);
}
	
Vh0 h = 1;
real error = 0.001; // 0.04
real angle = 1.5708, x0 = 0.25, y0 = 0.1, R = 0.01;
real hmincustom = 0.03*R;
while(h[].min >= hmincustom)
{
    Poisson;
    Th = adaptmesh(Th, [u, 1/(1 + tipfield(x0, y0, R))], err = error, nbvx = 1000000, hmin = hmincustom, iso = true, ratio = 3);
    error = 0.5*error;
    u = u;
    h = hTriangle; // the triangle size
}
Poisson;
plot(Th, fill = 1, wait = true);
plot(u, fill = 1, value = true, wait = true, ps = "solution.eps");




////////////////////////////////////////////////
// Find the growth rate and direction of tips //
////////////////////////////////////////////////
func real BaseVector(int nf, complex zf) // this defines the base vectors of the analytical field around a tip
{
  real result = 0;
  
  if (nf%2 == 0) 
    result = -imag(zf^(nf/2.));
  else 
    result = real(zf^(nf/2.));
  return result;
}

mesh Ph = trunc(Th, (sqrt((x - x0)^2 + (y - y0)^2) < 3*R)); 
plot(Ph, fill = 1, wait = true);

fespace Wh(Ph, P2); //Wh up = u;
int exponant = 2; // the precision of the exponential
real[int] a(3); // the list of coefficients of the expansion
for(int order = 1; order <= a.n; ++order)
{ 
     a[order - 1] =
         int2d(Ph)( 
             u*exp(-(sqrt((x - x0)^2 + (y - y0)^2)/R)^exponant)
            *BaseVector(order, exp(-angle*1i) * ( (x-x0) + (y-y0)*1i) ) 
         ) /
         (int2d(Ph)(
             exp(-(sqrt((x-x0)^2 + (y-y0)^2)/R)^exponant)
            *square(BaseVector(order,exp(-angle*1i)*( (x-x0) + (y-y0)*1i) ) )
         ));
}




//PRINTING OF FINAL RESULTS
cout << endl << endl << endl;
cout << "Final parameters of integration used in test" << endl << endl;
cout << " - series params: " << endl;
for(int i = 0; i < a.n; ++i)
	cout << "   " <<a[i] << endl;

cout << " - integral over whole region" << endl;
cout << "   " << int2d(Th)(u) << endl;
cout << " - integration over tip circle" << endl;
cout << "   " << int2d(Ph)(u) << endl;
cout << "----- done." << endl << endl << endl;
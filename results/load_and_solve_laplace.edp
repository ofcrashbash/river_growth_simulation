
// Defining the projection function to extract the expansion of the field around a tip
//////////////////////////////////////////

real x0 = 0., y0 = 0., R = 0.01, WeightNorm = 0;

real[int] a(3); // the list of coefficients of the expansion
int exponant = 2; // the precision of the exponential

func real BaseVector(int nf, complex zf) // this defines the base vectors of the analytical field around a tip
{
  real result = 0;
  
  if (nf%2 == 0) 
    result = -imag(zf^(nf/2.));
  else 
    result = real(zf^(nf/2.));
  return result;
}


func real tipfield( real[int] X, real[int] Y,real sigma,int nTips)
{
 real err = 0;
 for(int i = 0; i < nTips; i++)
    {
        real rsq = (x - X(i))^2 + (y - Y(i))^2;
        if(rsq < 2.*square(sigma))        
        err += exp(-(rsq / (2.0*sigma^2)));
    }
 return err;
}

//////////////////////////////////////////
// load the mesh and solve
//////////////////////////////////////////
// load the delaunay mesh 
mesh Th = readmesh("Mesh.msh");
cout<<" Mesh reading done"<<endl;
//plot(Th, fill = 1, wait = 1);
Th = adaptmesh(Th , 1, nbvx = 500000, hmax = 0.1, nbsmooth = 100, iso = true, ratio = 1.8);
//plot(Th, fill = 1, wait = 1);
/////////////////////////////////////////
// new tip reading method
real[int, int] tips(1,1);
real[int]      angle(3);
real[int] X(1); 
real[int] Y(1);
real[int] Names(1);
ifstream freefemInput1("freefem_input.dat");
int nbTips; freefemInput1 >> nbTips; // get the number of tips
tips.resize(2, nbTips);               // resize the tip array
angle.resize(nbTips);                // resize the angle array
X.resize(nbTips);
Y.resize(nbTips); 
Names.resize(nbTips);
cout<< "Number of Tips: "<<nbTips<<endl;

ifstream settings("FEM_settings.txt");
int equation; settings >> equation;
int adaptation; settings >> adaptation;

// read in the tips
for(int i = 0;i < nbTips; i++){
    cout<< "Index: "<< i <<"  ";
    freefemInput1 >> X(i) >> Y(i) >> angle(i) >> Names(i);
    cout << "(" << X(i) << "," << Y(i) << ")" << endl;
}






/////////////////////////////////////////
fespace Vh(Th, P2);
fespace Vh0(Th, P0);

Vh u, v;
Vh0 h = 1;

real rain = 1./4;

problem Laplace(u, v, solver = sparsesolver) =
         int2d(Th)(dx(u)*dx(v) + dy(u)*dy(v))
             -int1d(Th, 3)(v)  // constant flux
             //+ on(3,u = 50) // box height
             + on(1, u=0);             // impervious apalachicola

problem Poisson(u, v, solver = sparsesolver) =
         int2d(Th)(dx(u)*dx(v) + dy(u)*dy(v))
             -int2d(Th)(rain*v) 
             +on(1, u = 0)
             + on(2,u = 0)
             + on(3,u = 0);             // impervious apalachicola

//////////////////////////////////////////



// Tip field adaption
/*for(int k = 0; k < 2; k++)
{
 int nn = Th.nv;
cout << "\n\n" << Th.nv << "\n\n";
 Th = adaptmesh(Th, 0.25/(1 + 5e2 * tipfield(X, Y, 2.*R, nbTips)),
              nbvx = 2000000, IsMetric = 1, nbsmooth = 10, iso = true, ratio = 1.3);
cout << "\n\n" << Th.nv << "\n\n";
 if( abs(Th.nv - nn) <  0.1 * Th.nv ) break; // if less the 10% change stop.
}*/

/////////////////////////////////////////

if (equation == 0) Laplace;
if (equation == 1) Poisson;

cout << "First solve" << endl;
/////////////////////////////////////////
// adaption

if (adaptation == 1) {
    real error = 0.02; // 0.04
    while(h[].min >= 0.3*R)
    {
        if (equation == 0) Laplace;
        if (equation == 1) Poisson;
        Th = adaptmesh(Th, [u, 20/(1 + tipfield(X, Y, 2.*R, nbTips))], err = error, nbvx = 1000000, hmin = 0.25*R, iso = true, ratio = 3);
        error = 0.5*error;
        u = u;
        h = hTriangle; // the triangle size
    }
}

if (equation == 0) Laplace;
if (equation == 1) Poisson;

/////////////////////////////////////////

//plot(Th, fill = 1, wait = 1, ps = "net.eps");
//plot(u, fill = 1, wait = 1, ps = "field.eps");

cout << "problem solved" << endl;
//////////////////////////////////////////
// find the growth rate and direction of tips
//////////////////////////////////////////
cout << "Finding the Tip coefficients" << endl;
mesh Ph;
ofstream freefemOutput("freefem_output.dat");
ofstream flowProfile("flow_profile.dat");
for(int i=0; i < nbTips; ++i)
{
    cout << "Processing Tip" << i << "  ";   
    x0 = X(i); y0 = Y(i);
    //Th = splitmesh(Th, 1 + 1*((x-x0)^2+(y-y0)^2<(2*R)^2) );
    //Laplace;
    cout << "(" << x0 << "," << y0 << ") " << angle(i) << endl;
    cout << "Projecting...\n";	
    Ph = trunc(Th, (sqrt((x - x0)^2 + (y - y0)^2) < 3*R)); 
       cout << "Ph.nv = " << Ph.nv << endl;
    fespace Wh(Ph, P2); //Wh up = u;
    
    // algorithm searching for angle alpha, for which u(x0 + ring*R*sin(alpha), y0 + ring*R*cos(alpha)) = max.
    // i.e. the direction from which the flux is greatest
    real ring = 5;
    real angleRight = -pi;
    real angleLeft = pi;
    real valueRight = u(0, -ring*R);
    real valueLeft = u(0, ring*R);
    if (u(x0, y0 - ring*R) > u(x0, y0 + ring*R)) {
        angleRight = 0;
        angleLeft = 2*pi;
    }
    real angleCenter = (angleLeft + angleRight)/2;
    real valueCenter = u(x0 + ring*R*sin(angleCenter), y0 + ring*R*cos(angleCenter));
    real angleNew;
    real valueNew;
    bool newOnRight;
    for (int i = 1; i <= 64; i++) {
        //cout << angleLeft << " " << angleCenter << " " << angleRight << endl;
        //cout << valueLeft << " " << valueCenter << " " << valueRight << endl;
        if (angleCenter - angleRight > angleLeft - angleCenter) {
            newOnRight = 1;
            angleNew = (angleCenter + angleRight) / 2;
        } else {
            newOnRight = 0;
            angleNew = (angleCenter + angleLeft) / 2;
        }
        valueNew = u(x0 + ring*R*sin(angleNew), y0 + ring*R*cos(angleNew));
        if (valueNew > valueCenter) {
            if (newOnRight) {
                angleLeft = angleCenter;
                valueLeft = valueCenter;
            } else {
                angleRight = angleCenter;
                valueRight = valueCenter;
            }
            angleCenter = angleNew;
            valueCenter = valueNew;
        } else {
            if (newOnRight) {
                angleRight = angleNew;
                valueRight = valueNew;
            } else {
                angleLeft = angleNew;
                valueLeft = valueNew;
            }
        }
    }
    /*real angleCenter;
    real bestValue = 0;
    for (real angle = -pi; angle < pi; angle = angle + 2*pi/1024) {
        real value = u(x0 + ring*R*sin(angle), y0 + ring*R*cos(angle));
        if (bestValue < value) {
            angleCenter = angle;
            bestValue = value;
        }
        flowProfile << angle << "\t" << value << endl;
    }*/
    //cout << "angle = " << angleCenter * 180 / pi << endl;
    
    for(int order = 1; order <= a.n; ++order){ 
        a[order - 1] =
        int2d(Ph)( u*exp(-(sqrt((x - x0)^2 + (y - y0)^2)/R)^exponant)
		*BaseVector(order, exp(-angle(i)*1i)*( (x-x0) + (y-y0)*1i) ) ) /
        (int2d(Ph)(exp(-(sqrt((x-x0)^2 + (y-y0)^2)/R)^exponant)
		*square(BaseVector(order,exp(-angle(i)*1i)*( (x-x0) + (y-y0)*1i) ) )));
        freefemOutput << a[order-1] << " ";
        cout << "a(" << order << ")=" << a[order - 1] << endl;
    }
    freefemOutput << angleCenter << " " << Names(i) << endl;

};
//plot(Ph, fill = 1, wait = 1, ps = "circle.eps");

/* 
cout<< "Writing out the field5" << endl;
// string could be read from data file to save the field in each timestep
{
ofstream FieldFile("freefem_field.csv");
// header for matlab
FieldFile << Th.nv << " " << Th.nt << endl;
// first write out the nodes
for (int i = 0; i < Th.nv; i++)
{
 FieldFile << Th(i).x << " " << Th(i).y << " " << u(Th(i).x, Th(i).y) << endl;
}

// then write out the mesh connectivity
for (int i = 0; i < Th.nt; i++)
{ 
  FieldFile << Th[i][0] << " " << Th[i][1] << " " << Th[i][2] << endl;
}
}
*/